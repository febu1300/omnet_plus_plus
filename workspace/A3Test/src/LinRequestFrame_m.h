//
// Generated file, do not edit! Created by opp_msgtool 6.0 from LinRequestFrame.msg.
//

#ifndef __LINREQUESTFRAME_M_H
#define __LINREQUESTFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class LinRequestFrame;
class LinResponseFrame;
/**
 * Class generated from <tt>LinRequestFrame.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // Generic LIN request frame
 * //
 * packet LinRequestFrame
 * {
 *     //LIN identifier, which encodes the expected
 *     //response message and the message type
 *     int messageId;
 * }
 * </pre>
 */
class LinRequestFrame : public ::omnetpp::cPacket
{
  protected:
    int messageId = 0;

  private:
    void copy(const LinRequestFrame& other);

  protected:
    bool operator==(const LinRequestFrame&) = delete;

  public:
    LinRequestFrame(const char *name=nullptr, short kind=0);
    LinRequestFrame(const LinRequestFrame& other);
    virtual ~LinRequestFrame();
    LinRequestFrame& operator=(const LinRequestFrame& other);
    virtual LinRequestFrame *dup() const override {return new LinRequestFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LinRequestFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LinRequestFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>LinRequestFrame.msg:25</tt> by opp_msgtool.
 * <pre>
 * packet LinResponseFrame extends LinRequestFrame
 * {
 *     //The response from a slave actually contains several (up to 8) 
 *     //data bytes plus a checksum. For simplicity, we assume that a 
 *     //slave will simply reply with a random yes/no value
 *     int response;
 * }
 * </pre>
 */
class LinResponseFrame : public ::LinRequestFrame
{
  protected:
    int response = 0;

  private:
    void copy(const LinResponseFrame& other);

  protected:
    bool operator==(const LinResponseFrame&) = delete;

  public:
    LinResponseFrame(const char *name=nullptr, short kind=0);
    LinResponseFrame(const LinResponseFrame& other);
    virtual ~LinResponseFrame();
    LinResponseFrame& operator=(const LinResponseFrame& other);
    virtual LinResponseFrame *dup() const override {return new LinResponseFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getResponse() const;
    virtual void setResponse(int response);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LinResponseFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LinResponseFrame& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline LinRequestFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<LinRequestFrame*>(ptr.get<cObject>()); }
template<> inline LinResponseFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<LinResponseFrame*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __LINREQUESTFRAME_M_H

