//Here starts LinNode.cc 
#include "LinNode.h"

Define_Module(LinNode)

LinNode::LinNode() {
}

LinNode::~LinNode() {
}

void LinNode::handleMessage(cMessage *msg) {

	if (msg->isSelfMessage()) {
		handleSelfMessage(msg);
	}
	else {
		receiveFrame(msg);
	}
}

void LinNode::handleSelfMessage(cMessage *msg) {
    //supposed to be overridden by master and slave classes
}

void LinNode::receiveFrame(cMessage *frame) {
    //supposed to be overridden by master and slave classes
    delete frame;
}


void LinNode::sendFrame(cMessage* msg) {
    int n = gateSize("gate");
    if (n==1){
        send(msg, "gate$o");
        return;
    }
    send(msg, "gate$o", 0);
    for (int i = 1; i < n; i++) {
        auto* newMsg = msg->dup();
        send(newMsg, "gate$o", i);
    }
}

FRAME_TYPE LinNode::getFrameType(int messageId) const {
    if (isUnconditional(messageId)) {
        return UNCONDITIONAL_FRAME;
    }
    else {
        if (isEventTriggered(messageId)) {
            return EVENT_TRIGGERED_FRAME;
        }
        else {
            if (isSporadic(messageId)) {
                return SPORADIC_FRAME;
            }
            else {
                return UNKNOWN;
            }
        }
    }
}

std::list<int> LinNode::getEventTriggeredIds(int messageId) const {

         std::list<int> ids;

         if (!isEventTriggered(messageId)) {
             ASSERT2(false, "Bad programmer! This should never happen!");
         }

         /* for simplicity, we assume that each event triggered message
          * regards four unconditional messages, so we map each event
          * triggered id with four unconditional ids
          */

         messageId -= FIRST_EVENT_TRIGGERED;
         messageId *= UNCONDITIONALS_PER_EVENT_TRIGGERED;
         for (int i = 0; i < UNCONDITIONALS_PER_EVENT_TRIGGERED; i++){
             ids.push_back(messageId + i);
         }
         return ids;

     }

bool LinNode::isResponsibleForEventTriggered(int messageId) const {

    if (!isEventTriggered(messageId)) {
        return false;
    }

    messageId -= FIRST_EVENT_TRIGGERED;
    messageId *= UNCONDITIONALS_PER_EVENT_TRIGGERED;

    //check whether the ECU id is within the range of messages that the event
    //triggered message regards
    if (getIndex() >= messageId && getIndex() < messageId + UNCONDITIONALS_PER_EVENT_TRIGGERED) {
       return true;
    }
    return false;
}





//Here Starts LinMaster.cc



#include "LinMaster.h"

Define_Module(LinMaster)

LinMaster::LinMaster() {
}

LinMaster::~LinMaster() {
    cancelAndDelete(sendNewMsg);
    cancelAndDelete(selfEvent);
    cancelAndDelete(changeSporadic);
}

void LinMaster::initialize() {
    needSporadic = false;
    changeSporadic = new cMessage("changeSporadic");
    scheduleAt(simTime() + SimTime(omnetpp::uniform(getRNG(0), 2, 4), SimTimeUnit::SIMTIME_MS), changeSporadic);


    /*
     * todo: initialize all variables needed and schedule the first LIN-frame for the time step 10ms
     */
    sendNewMsg = new cMessage("New Message");
    scheduleAt(simTime() + SimTime(omnetpp::uniform(getRNG(0), 9, 11), SimTimeUnit::SIMTIME_MS), sendNewMsg);

    selfEvent = new cMessage("self Event");
    scheduleAt(simTime() + SimTime(omnetpp::uniform(getRNG(0), 6, 8), SimTimeUnit::SIMTIME_MS), selfEvent);

}

void LinMaster::finish() {

    test();

    /*
     * Record final statistics
     */
}

void LinMaster::handleSelfMessage(cMessage *msg) {
    int messageId;

    if (msg == changeSporadic) {
        needSporadic = true;
       // EV <<"hello "<< gateSize("MasterOut") <<"\n";
        gateSize("MasterOut");

        //  messageId = getRandomMessageId(msg);
        scheduleAt(simTime() + SimTime(omnetpp::uniform(getRNG(0), 2, 4), SimTimeUnit::SIMTIME_MS), changeSporadic);
        EV <<"sproadic"<< gateSize("MasterOut") << "\n";

       // LinNode::sendFrame(msg);
    } else if (msg==sendNewMsg) {
        needSporadic = false;
       // messageId = getRandomMessageId(FRAME_TYPE::SPORADIC_FRAME);
        //sendLinRequest(messageId);

        EV <<"Unconditional"<< gateSize("MasterOut") << "\n";

        scheduleAt(simTime() + SimTime(omnetpp::uniform(getRNG(0), 9, 11), SimTimeUnit::SIMTIME_MS), sendNewMsg);

    } else if (msg == selfEvent){
        needSporadic = false;
     //   messageId = getRandomMessageId(FRAME_TYPE::EVENT_TRIGGERED_FRAME);
      //  sendLinRequest(messageId);
       // selfEvent = new cMessage("New Message");
        EV <<"event triggered"<< gateSize("MasterOut") << "\n";
        scheduleAt(simTime() + SimTime(omnetpp::uniform(getRNG(0), 6, 8), SimTimeUnit::SIMTIME_MS), selfEvent);

    }

    /*
     * handle self messages in order to send next packet or check timeouts
     */

}

void LinMaster::receiveFrame(cMessage *msg) {

    /*
     * todo: handle received Frames, check for collisions
     */

    LinRequestFrame *receivedFrame = dynamic_cast<LinRequestFrame*>(msg);
      if (receivedFrame) {
          int receivedMessageId = receivedFrame->getMessageId();
          EV << receivedMessageId <<"\n";
      }
/*Sind zwei Frames zur gleichen Zeit an der Reihe, soll nur das
      versendet werden, das ein lÃ¤ngeres Interval hat. Es darf nur und muss ein einziges Frame
      pro Zeitslot versendet werden!
 */
      // Perform collision checking logic
      // if dectected
      // Handle collision
      // if not process the received frame

    delete msg;
}


int LinMaster::getRandomMessageId(FRAME_TYPE frameType) const {
    switch (frameType){
    case (FRAME_TYPE::UNCONDITIONAL_FRAME):{
        return omnetpp::intuniform(getRNG(1), FIRST_UNCONDITIONAL, LAST_UNCONDITIONAL);
    }
    case (FRAME_TYPE::SPORADIC_FRAME):{
        return omnetpp::intuniform(getRNG(1), FIRST_SPORADIC, LAST_SPORADIC);
        }
    case (FRAME_TYPE::EVENT_TRIGGERED_FRAME):{
        return omnetpp::intuniform(getRNG(1), FIRST_EVENT_TRIGGERED, LAST_EVENT_TRIGGERED);
        }
    default:{
        ASSERT2(false, "No message id can be generated for the type UNKNOWN!");
    }
    }
    return -1;
}

void LinMaster::sendLinRequest(int messageId) {

    std::cout << simTime().ustr() << ": Master sends ";
    auto frameType = getFrameType(messageId);
    switch(frameType){
    case UNCONDITIONAL_FRAME:{
        std::cout << "an unconditional frame ";
        break;
    }
    case SPORADIC_FRAME:{
        std::cout << "a sporadic frame ";
        break;
    }
    case EVENT_TRIGGERED_FRAME:{
        std::cout << "an event-triggered frame ";
        break;
    }
    default: {}
    }
    std::cout << "with ID " << messageId << std::endl;


    LinRequestFrame *frame = new LinRequestFrame();
    frame->setMessageId(messageId);
    sendFrame(frame);

    auto t = simTime();
    if (t < .2){  // Record the start
        testRecording0.push_back(messageId);
    } else if (t >= 2.9 && t < 3.08){// Record somewhere in the middle
        testRecording1.push_back(messageId);
    }
    testSent[frameType]++;
}

void LinMaster::test() const {
    std::cout << std::endl << "**************** STARTING TESTS ****************" << std::endl;

    bool testRecordingsMatch = true;
    std::cout << "Testing the start of the simulation..." << std::endl;
    std::vector<int> toBeRecording0 = {37, 12, 8, 9, 11, 5, 50, 0, 1, 2, 3, 16, 1, 57, 6, 25, 20, 37, 18};
    for ( int i = 0; i < toBeRecording0.size(); i++){
        if (toBeRecording0[i] != testRecording0[i]){
            std::cout << toBeRecording0[i] << " expected. Got " << testRecording0[i] << std::endl;
            testRecordingsMatch = false;
        }
    }

    if (testRecordingsMatch){
        std::cout << "Testing the middle of the simulation..." << std::endl;
        std::vector<int> toBeRecording1 = {2, 3, 32, 28, 57, 28, 29, 30, 31, 18, 48, 53, 12, 48, 13, 14, 15, 32};
        for ( int i = 0; i < toBeRecording1.size(); i++){
            if (toBeRecording1[i] != testRecording1[i]){
                std::cout << toBeRecording1[i] << " expected. Got " << testRecording1[i] << std::endl;
                testRecordingsMatch = false;
            }
        }
    }


    std::cout << "Checking the amount of sent request frames..." << std::endl;
    std::vector<int> toBeSent = {5104, 857, 39};
    if (toBeSent[UNCONDITIONAL_FRAME] != testSent[UNCONDITIONAL_FRAME]){
        std::cout << toBeSent[UNCONDITIONAL_FRAME] << " unconditional frames expected. Got " << testSent[UNCONDITIONAL_FRAME] << std::endl;
    }
    if (toBeSent[SPORADIC_FRAME] != testSent[SPORADIC_FRAME]){
        std::cout << toBeSent[SPORADIC_FRAME] << " sporadic frames expected. Got " << testSent[SPORADIC_FRAME] << std::endl;
    }
    if (toBeSent[EVENT_TRIGGERED_FRAME] != testSent[EVENT_TRIGGERED_FRAME]){
        std::cout << toBeSent[EVENT_TRIGGERED_FRAME] << " event-triggered frames expected. Got " << testSent[EVENT_TRIGGERED_FRAME] << std::endl;
    }

    if (getRNG(0)->getNumbersDrawn() != 23){
        std::cout << "It seems you have used the RNG(0) somewhere! Don't use it! This messed up the needSporadic interval." << std::endl;
    }

    if (getRNG(1)->getNumbersDrawn() != 3638){
        std::cout << "It seems you have requested to " << (getRNG(1)->getNumbersDrawn() > 3638 ? "many" : "few") << " random message IDs! You might want to check your scheduling logic." << std::endl;
    }

    if (getRNG(2)->getNumbersDrawn() != 39){
        std::cout << "It seems you have sent to " << (getRNG(2)->getNumbersDrawn() > 39 ? "many" : "few") << " sporadic frames! You might want to check your scheduling logic." << std::endl;
    }

    if (getRNG(3)->getNumbersDrawn() != 3428){
        std::cout << "It seems you have responded " << (getRNG(3)->getNumbersDrawn() > 3428 ? "to often" : "to rarely") << " to event-triggered frames sporadic frames! You might want to check your scheduling logic." << std::endl;
    }

    std::cout << std::endl << "**************** TESTS FINISHED ****************" << std::endl;
}


//Here starts LinSlave.cc



#include "LinSlave.h"

Define_Module(LinSlave)

LinSlave::LinSlave()
{}

LinSlave::~LinSlave()
{}

void LinSlave::receiveFrame(cMessage *msg) {

    LinResponseFrame *responseFrame = dynamic_cast<LinResponseFrame*>(msg);
        if (responseFrame) {
            int responseMessageId = responseFrame->getMessageId();
          EV <<  responseMessageId << "\n";
        }
    delete msg;
}

void LinSlave::sendLinResponse(int messageId, int response) {
    std::cout << simTime().ustr() << ": Slave " << getIndex() << " sends response on " << messageId << " with " << response << std::endl;
    LinResponseFrame* frame = new LinResponseFrame();
    frame->setMessageId(messageId);
    frame->setResponse(response);

    sendFrame(frame);
}

int LinSlave::getResponse() const {
    return getFrameType(getIndex()) != SPORADIC_FRAME ? 42 : omnetpp::intuniform(getRNG(2), 0, 1);
}

bool LinSlave::hasUpdatedData() const {
    return omnetpp::intuniform(getRNG(3), 0, 1);
}


//Here starts LinMaster.ned

package lin;

//class defining a LIN master
simple LinMaster extends LinNode
{
    parameters:
        @class(LinMaster);
        
    gates:
      	//define the gate going to/coming from the bus
      	input  MasterIn[];
      	output  MasterOut[];
}


// Here Starts Lin.ned

package lin.simulations;

import lin.LinMaster;
import lin.LinSlave;


//ned defining the LIN network
network Lin
{
    parameters:
        //number of slaves in the LIN network
        int numSlaves = 50;

        @display("bgb=730,367");
    submodules:
          // place the slaves and master node. define the number of gates for the master
           LSlave[numSlaves]: LinSlave;
           LMaster: LinMaster;
       	
    connections:
        //todo: connect each slave with the master
           for i = 0..numSlaves-1 {
            LSlave[i].LinSlaveOut++ --> LMaster.MasterIn++;
            LMaster.MasterOut++ --> LSlave[i].LinSlaveIn++;
        }
        
}

// Here starts LinSlave.ned

package lin;

//class defining a LIN slave
simple LinSlave extends LinNode
{
    parameters:
        @class(LinSlave);
    gates:          

        // define the gate going to/coming from the bus
        input LinSlaveIn[];
        output LinSlaveOut[];
}


