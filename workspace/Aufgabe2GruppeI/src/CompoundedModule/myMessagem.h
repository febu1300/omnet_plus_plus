#ifndef __MYMESSAGE_M_H
#define __MYMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class MyMessage;
/**
 * Class generated from <tt>myMessage.msg:1</tt> by opp_msgtool.
 * <pre>
 * message MyMessage
 * {
 *     int priority;
 *     simtime_t timestamp;
 *     bool hastimestamp;
 * }
 * </pre>
 */
class MyMessage : public ::omnetpp::cMessage
{
  protected:
    int priority = 0;
    omnetpp::simtime_t timestamp = SIMTIME_ZERO;
    bool hastimestamp = false;

  private:
    void copy(const MyMessage& other);

  protected:
    bool operator==(const MyMessage&) = delete;

  public:
    MyMessage(const char *name=nullptr, short kind=0);
    MyMessage(const MyMessage& other);
    virtual ~MyMessage();
    MyMessage& operator=(const MyMessage& other);
    virtual MyMessage *dup() const override {return new MyMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getPriority() const;
    virtual void setPriority(int priority);

    virtual omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(omnetpp::simtime_t timestamp);

    virtual bool getHastimestamp() const;
    virtual void setHastimestamp(bool hastimestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline MyMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<MyMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MYMESSAGE_M_H
